#!/usr/bin/python3.11
# Copyright (C) 2010 Samuel Abels.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import argparse
import datetime
import os
import sys

sys.path.insert(0, 'src')
from Gelatin.generator import Json, Xml, Yaml
from Gelatin.generator.Builder import Builder
from Gelatin.util import compile

parser = argparse.ArgumentParser(
    description = "Gelatin converts text to a structured format, such as XML, JSON or YAML."
)
parser.add_argument('filename', help="Path to the gelatin file.", nargs='+')
parser.add_argument(
    '-s',
    '--syntax',
    default = None,
    help = "The file containing the syntax for parsing the input.",
    metavar = 'FILE',
    required = True
)
parser.add_argument(
    '-f',
    '--format',
    choices = ["xml", "json", "yaml", "none"],
    default = 'xml',
    help = "The output format.",
    metavar = 'FORMAT'
)
parser.add_argument(
    '--debug',
    default = 0,
    help = "Print debug info.",
    metavar = 'NUM',
    type = int     
)

if __name__ == '__main__':
    args = parser.parse_args()

    if not os.path.exists(args.syntax):
        raise argparse.ArgumentError(f'no such file or directory: {args.syntax}')
    if not os.path.isfile(args.syntax):
        raise argparse.ArgumentError(f'not a valid input file: {args.syntax}')

    match args.format:
        case "json":
            serializer = Json.Json()
        case "xml":
            serializer = Xml.Xml()
        case "yaml":
            serializer = Yaml.Yaml()


    def dbg(message):
        if args.debug:
            now = str(datetime.datetime.now())
            sys.stderr.write(f"{now} {message}\n")

    start = datetime.datetime.now()
    dbg(f"Compiling {args.syntax}...")
    converter = compile(args.syntax)
    for input_file in args.filename:
        dbg(f"Parsing {input_file}...")
        builder = Builder()
        converter.parse(input_file, builder, debug=args.debug)
        if args.format != 'none':
            dbg("Generating output...")
            print(builder.serialize(serializer))
    dbg(f'Total: {str(datetime.datetime.now() - start)}')
